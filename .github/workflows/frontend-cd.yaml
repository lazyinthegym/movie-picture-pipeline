name: Frontend Continuous Deployment

on:
  push:
    branches:
      # TODO: change this back to master
      - master-temp 
  workflow_dispatch:
    inputs:
      movie_api_url:
        description: 'URL for the Movie API'
        required: false
        default: 'http://localhost:5000'

defaults:
  run:
    working-directory: app/frontend

env:
  NODE_VERSION: '18'
  REACT_APP_MOVIE_API_URL: ${{ github.event.inputs.movie_api_url || 'http://localhost:5000' }}
  ECR_REPOSITORY: 'movie-frontend'
  AWS_REGION: 'us-east-1'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup NodeJS
      uses: actions/setup-node@v4.0.3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ./app/frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('./app/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm ci

    - name: Run Lint
      run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup NodeJS
      uses: actions/setup-node@v4.0.3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ./app/frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('./app/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm ci

    - name: Run Tests
      run: CI=true npm test

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup NodeJS
      uses: actions/setup-node@v4.0.3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ./app/frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('./app/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm ci

    - name: Build Docker Image
      run: docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Tag Docker Image
      run: docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Push Docker Image to ECR
      run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy to Kubernetes
      run: |
        cd k8s
        aws eks --region us-east-1 update-kubeconfig --name cluster
        kustomize edit set image frontend=${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        kustomize build | kubectl apply -f -
